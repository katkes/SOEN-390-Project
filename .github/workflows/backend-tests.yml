name: Backend Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set DOCKER_TAG
        run: |
          if [[ "${{ github.ref }}" == refs/pull/* ]]; then
            BRANCH_NAME=$(echo "${{ github.head_ref }}")
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          fi
          echo "DOCKER_TAG=${BRANCH_NAME}" >> $GITHUB_ENV  
      
      - name: Debug Docker Tag
        run: |
          echo "DOCKER_TAG=${DOCKER_TAG}"
      
      - name: Pull Docker images
        run: |
          docker pull proppele1/soen-390-backend:${DOCKER_TAG}
          docker pull postgis/postgis:latest
      
      - name: Create .env.test file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.test
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.test
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.test
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.test
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.test
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.test
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env.test
          echo "DJANGO_TEST=true" >> .env.test

      - name: Debug .env.test
        run: |
          echo " Checking .env.test file..."
          cat .env.test | grep -v 'SECRET_KEY\|DB_PASSWORD' || echo " .env.test file is empty or missing."

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml --env-file .env.test up --abort-on-container-exit

      - name: Create reports directory in backend
        run: mkdir -p backend/reports

      - name: Copy coverage report from container
        run: |
          docker cp django_test_container:/app/coverage.xml backend/reports/

      - name: Copy test report from container
        run: |
          docker cp django_test_container:/app/test-report.xml backend/reports/

      #  Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCS_KEY }}

      #  Manually Authenticate `gcloud` CLI (Fix for "No credentialed accounts" issue)
      - name: Manually Authenticate gcloud CLI
        run: |
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth list  # Debugging step to verify authentication

      #  Install Google Cloud CLI
      - name: Install Google Cloud CLI
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-cli

      #  Ensure Folder Exists in GCS (Fixes permission issue)
      - name: Ensure Folder Exists in GCS
        run: |
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||' | tr '/' '_')

          echo "Checking if folder exists in GCS..."
          if gsutil -q stat gs://soen_390_reports/$BRANCH_NAME/backend/.keep; then
            echo " Folder already exists in GCS."
          else
            echo " Folder does not exist. Creating placeholder..."
            echo "Placeholder file" > backend/reports/.keep
            gsutil cp backend/reports/.keep gs://soen_390_reports/$BRANCH_NAME/backend/.keep
          fi

      #  Upload Test Reports to GCS
      - name: Upload Test Reports to GCS
        run: |
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||' | tr '/' '_')
          gsutil cp backend/reports/coverage.xml gs://soen_390_reports/$BRANCH_NAME/backend/coverage.xml
          gsutil cp backend/reports/test-report.xml gs://soen_390_reports/$BRANCH_NAME/backend/test-report.xml
