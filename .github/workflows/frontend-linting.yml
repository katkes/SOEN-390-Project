name: Flutter Linting

on:
  push:
    paths:
      - frontend/**
  pull_request:
    branches:
      - main

jobs:
  linting:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          architecture: x64

      - name: Install Flutter dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Verify Flutter formatting
        working-directory: ./frontend
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze Flutter project and generate report
        working-directory: ./frontend
        run: |
          flutter analyze --write=analysis_report.json || true

      - name: Ensure analysis_report.json is not empty
        working-directory: ./frontend
        run: |
          if [ ! -s analysis_report.json ]; then
            echo "⚠️ No lint issues found, creating empty SonarCloud report..."
            echo '{"issues": []}' > analysis_report.json
          fi

      - name: Debug Flutter Analysis Report
        working-directory: ./frontend
        run: |
          echo "Checking if analysis_report.json exists..."
          ls -l
          cat analysis_report.json || echo "❌ analysis_report.json not found!"

      - name: Convert Flutter Analysis Report to SonarCloud Format
        working-directory: ./frontend
        run: |
          mkdir -p reports  # Ensure reports directory exists
          python - <<EOF
          import json
          import os

          INPUT_FILE = "analysis_report.json"
          OUTPUT_DIR = "reports"
          OUTPUT_FILE = os.path.join(OUTPUT_DIR, "sonar-flutter-lint.json")

          try:
              if not os.path.exists(INPUT_FILE):
                  raise FileNotFoundError(f"{INPUT_FILE} does not exist.")

              # Handle empty or invalid JSON file
              if os.stat(INPUT_FILE).st_size == 0:
                  print("⚠️ analysis_report.json is empty. Creating a valid empty report.")
                  output_json = {"issues": []}
              else:
                  with open(INPUT_FILE, "r") as f:
                      data = json.load(f)

                  output_json = {"issues": []}
                  for issue in data.get("issues", []):
                      file_path = issue["location"]["file"]
                      message = issue["message"]
                      severity = issue["severity"].upper()

                      severity_map = {
                          "ERROR": "CRITICAL",
                          "WARNING": "MAJOR",
                          "INFO": "MINOR",
                      }

                      output_json["issues"].append({
                          "engineId": "flutter-analyze",
                          "ruleId": "dart-lint",
                          "severity": severity_map.get(severity, "MINOR"),
                          "type": "CODE_SMELL",
                          "primaryLocation": {
                              "message": message,
                              "filePath": f"frontend/{file_path}",
                              "textRange": {
                                  "startLine": issue["location"]["startLine"],
                                  "endLine": issue["location"]["startLine"]
                              }
                          }
                      })

              # Save output file
              with open(OUTPUT_FILE, "w") as f:
                  json.dump(output_json, f, indent=2)

              print(f"✅ Successfully converted {len(output_json['issues'])} Flutter lint issues to SonarCloud format at {OUTPUT_FILE}.")

          except json.JSONDecodeError:
              print("❌ Error: analysis_report.json is not a valid JSON file.")
              exit(1)
          except Exception as e:
              print(f"❌ Error processing Flutter lint report: {e}")
              exit(1)
          EOF

      - name: Verify SonarCloud Lint Report Exists
        working-directory: ./frontend
        run: |
          if [ -f reports/sonar-flutter-lint.json ]; then
            echo "✅ SonarCloud Lint Report found!"
          else
            echo "⚠️ No issues found, generating an empty SonarCloud report."
            mkdir -p reports
            echo '{"issues": []}' > reports/sonar-flutter-lint.json
          fi

      - name: Upload Flutter Lint Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-lint-report
          path: frontend/reports/sonar-flutter-lint.json
          retention-days: 1
