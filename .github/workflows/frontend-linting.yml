name: Flutter Linting

on:
  push:
    paths:
      - frontend/**
  pull_request:
    branches:
      - main

jobs:
  linting:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          architecture: x64

      - name: Install Flutter dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Verify Flutter formatting
        working-directory: ./frontend
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze Flutter project and generate report
        working-directory: ./frontend
        run: |
          flutter analyze --write=analysis_report.json || true

      - name: Debug Flutter Analysis Report
        working-directory: ./frontend
        run: |
          echo "Checking if analysis_report.json exists..."
          ls -l
          cat analysis_report.json || echo "❌ analysis_report.json not found!"

      - name: Convert Flutter Analysis Report to SonarCloud Format
        working-directory: ./frontend
        run: |
          mkdir -p reports  # Ensure reports directory exists
          python - <<EOF
          import json
          import os

          INPUT_FILE = "analysis_report.json"
          OUTPUT_DIR = "reports"
          OUTPUT_FILE = os.path.join(OUTPUT_DIR, "sonar-flutter-lint.json")

          try:
              if not os.path.exists(INPUT_FILE):
                  raise FileNotFoundError(f"{INPUT_FILE} does not exist.")

              with open(INPUT_FILE, "r") as f:
                  data = json.load(f)

              sonar_issues = []
              for issue in data.get("issues", []):
                  file_path = issue["location"]["file"]
                  message = issue["message"]
                  severity = issue["severity"].upper()

                  severity_map = {
                      "ERROR": "CRITICAL",
                      "WARNING": "MAJOR",
                      "INFO": "MINOR",
                  }

                  sonar_issues.append({
                      "engineId": "flutter-analyze",
                      "ruleId": "dart-lint",
                      "severity": severity_map.get(severity, "MINOR"),
                      "type": "CODE_SMELL",
                      "primaryLocation": {
                          "message": message,
                          "filePath": f"frontend/{file_path}",
                          "textRange": {
                              "startLine": issue["location"]["startLine"],
                              "endLine": issue["location"]["startLine"]
                          }
                      }
                  })

              output_json = {"issues": sonar_issues}

              with open(OUTPUT_FILE, "w") as f:
                  json.dump(output_json, f, indent=2)

              print(f"✅ Successfully converted {len(sonar_issues)} Flutter lint issues to SonarCloud format at {OUTPUT_FILE}.")

          except Exception as e:
              print(f"❌ Error processing Flutter lint report: {e}")
              exit(1)
          EOF

      - name: Verify SonarCloud Lint Report Exists
        working-directory: ./frontend
        run: |
          echo "Checking if sonar-flutter-lint.json exists..."
          ls -l reports
          cat reports/sonar-flutter-lint.json || echo "❌ sonar-flutter-lint.json not found!"

      - name: Upload Flutter Lint Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-lint-report
          path: frontend/reports/sonar-flutter-lint.json
          retention-days: 1
