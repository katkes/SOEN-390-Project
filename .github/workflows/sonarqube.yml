name: SonarCloud Analysis 

on:
  push:
    branches:
      - main
      - release/**  # Run SonarCloud for main and release branches

  pull_request:
    branches:
      - main  # Run SonarCloud on PRs targeting main

  schedule:
   - cron: '0 2 */2 * *'  # Runs every other day at 2 AM UTC

permissions:
  actions: read  # ‚úÖ Allows reading workflow artifacts
  contents: read  # ‚úÖ Required for repository access

jobs:
  setup:
    name: Setup Job
    runs-on: ubuntu-latest
    steps:
      - name: Print Setup Message
        run: echo "Initializing SonarCloud Analysis Workflow"

  fetch-artifacts:
    name: Fetch Latest Test & Lint Reports (Backend + Frontend)
    runs-on: ubuntu-latest

    steps:
      - name: Ensure Report Directories Exist
        run: mkdir -p backend/reports frontend/reports

      - name: Get Latest Successful Backend Test Run ID
        run: |
          echo "üîç Searching for the latest successful Backend Test run..."
          TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&branch=${{ github.ref_name }}" | \
            jq -r '[.workflow_runs[] | select(.name=="Backend Tests" and .conclusion=="success") | .id] | first // empty')

          if [[ -z "$TEST_RUN_ID" ]]; then
            echo "‚ö†Ô∏è No successful Backend Tests run found."
          else
            echo "‚úÖ Found Backend Tests Run ID: $TEST_RUN_ID"
            echo "LATEST_TEST_RUN_ID=${TEST_RUN_ID}" >> $GITHUB_ENV
          fi

      - name: Get Latest Successful Flutter Test Run ID
        run: |
          echo "üîç Searching for the latest successful Flutter Test run..."
          FLUTTER_TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&branch=${{ github.ref_name }}" | \
            jq -r '[.workflow_runs[] | select(.name=="Flutter Testing" and .conclusion=="success") | .id] | first // empty')

          if [[ -z "$FLUTTER_TEST_RUN_ID" ]]; then
            echo "‚ö†Ô∏è No successful Flutter Tests run found."
          else
            echo "‚úÖ Found Flutter Testing Run ID: $FLUTTER_TEST_RUN_ID"
            echo "LATEST_FLUTTER_TEST_RUN_ID=${FLUTTER_TEST_RUN_ID}" >> $GITHUB_ENV
          fi

      - name: Download Backend Test Report (If Exists)
        run: |
          if [[ -n "$LATEST_TEST_RUN_ID" ]]; then
            echo "üîΩ Downloading Backend test reports..."
            mkdir -p backend/reports
            # Download logic goes here
          else
            echo "‚ö†Ô∏è Skipping Backend report download (no successful run found)."
          fi

      - name: Download Flutter Test Coverage Artifact (If Exists)
        run: |
          if [[ -n "$LATEST_FLUTTER_TEST_RUN_ID" ]]; then
            echo "üîΩ Downloading Flutter test coverage artifact..."
            FLUTTER_TEST_ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_FLUTTER_TEST_RUN_ID}/artifacts" | \
              jq -r '[.artifacts[] | select(.name=="frontend-coverage") | .archive_download_url] | first // empty')

            if [[ -z "$FLUTTER_TEST_ARTIFACT_URL" ]]; then
              echo "‚ö†Ô∏è No Flutter coverage artifact found!"
            else
              echo "‚úÖ Downloading artifact..."
              curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -o frontend-coverage.zip "$FLUTTER_TEST_ARTIFACT_URL"

              echo "üìÇ Extracting coverage artifact..."
              mkdir -p frontend/coverage
              unzip -o frontend-coverage.zip -d frontend/coverage || echo "‚ö†Ô∏è Extraction failed, but continuing."

              if [[ ! -s frontend/coverage/lcov.info ]]; then
                echo "‚ö†Ô∏è Downloaded coverage file is empty!"
              fi
            fi
          else
            echo "‚ö†Ô∏è Skipping Flutter test artifact download (no successful run found)."
          fi

      - name: Check If Any Reports Were Retrieved
        run: |
          if [ ! -d "backend/reports" ] && [ ! -d "frontend/coverage" ]; then
            echo "‚ùå No test reports found. Skipping SonarCloud analysis."
            exit 1
          fi

      - name: List Downloaded Reports
        run: |
          echo "üìÑ Checking downloaded reports..."
          ls -R backend/reports frontend/reports || echo "‚ö†Ô∏è No reports found, but proceeding."

  sonarqube:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: fetch-artifacts
    if: success()  # Run only if fetch-artifacts didn't fail

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full Git history for analysis

      - name: Ensure Required Reports Exist (Prevent SonarCloud Failure)
        run: |
          mkdir -p backend/reports frontend/reports

          if [ ! -f frontend/coverage/lcov.info ]; then
            echo "‚ö†Ô∏è Coverage report missing, creating empty file!"
            echo "TN:" > frontend/coverage/lcov.info
          fi

      - name: List Reports Before Running SonarCloud
        run: |
          echo "üîç Backend Reports:"
          ls -lh backend/reports || echo "‚ö†Ô∏è No backend reports found."
          echo "üîç Frontend Reports:"
          ls -lh frontend/reports || echo "‚ö†Ô∏è No frontend reports found."

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
