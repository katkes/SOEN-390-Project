name: SonarCloud Analysis

on:
  push:
    branches:
      - main
      - release/**  # Run SonarCloud for main and release branches

  pull_request:
    branches:
      - main  # Run SonarCloud on PRs targeting main

  schedule:
   - cron: '0 2 */2 * *'  # Runs every other day at 2 AM UTC


permissions:
  actions: read  # âœ… Allows reading workflow artifacts
  contents: read  # âœ… Required for repository access

jobs:
  setup:
    name: Setup Job
    runs-on: ubuntu-latest

    steps:
      - name: Print Setup Message
        run: echo "Initializing SonarCloud Analysis Workflow"

  fetch-artifacts:
    name: Fetch Latest Test & Lint Reports (Backend + Frontend)
    runs-on: ubuntu-latest

    steps:
      - name: Get Latest Workflow Run ID for Backend Tests
        run: |
          TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Backend Tests") | .id' | head -n 1)

          echo "LATEST_TEST_RUN_ID=${TEST_RUN_ID}" >> $GITHUB_ENV

      - name: Get Latest Workflow Run ID for Python Linting
        run: |
          LINT_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Python Linting & Formatting") | .id' | head -n 1)

          echo "LATEST_LINT_RUN_ID=${LINT_RUN_ID}" >> $GITHUB_ENV

      - name: Get Latest Workflow Run ID for Flutter Linting
        run: |
          FLUTTER_LINT_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Flutter Linting") | .id' | head -n 1)

          echo "LATEST_FLUTTER_LINT_RUN_ID=${FLUTTER_LINT_RUN_ID}" >> $GITHUB_ENV

      - name: Get Latest Workflow Run ID for Flutter Testing
        run: |
          FLUTTER_TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Flutter Testing") | .id' | head -n 1)

          echo "LATEST_FLUTTER_TEST_RUN_ID=${FLUTTER_TEST_RUN_ID}" >> $GITHUB_ENV

      # ðŸ“Œ Fetch Backend Test Reports
      - name: Get and Download Latest Backend Test Reports
        run: |
          mkdir -p backend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_TEST_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="test-reports") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading test-reports artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o test-reports-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip test-reports-$ID.zip -d backend/reports
          done

      # ðŸ“Œ Fetch Pylint Reports
      - name: Get and Download Latest Pylint Reports
        run: |
          mkdir -p backend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_LINT_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="pylint-reports") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading pylint-reports artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o pylint-reports-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip pylint-reports-$ID.zip -d backend/reports
          done

      # ðŸ“Œ Fetch Flutter Linting Reports
      - name: Get and Download Latest Flutter Linting Reports
        run: |
          mkdir -p frontend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_FLUTTER_LINT_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="flutter-lint-report") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading flutter-lint-report artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o flutter-lint-report-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip flutter-lint-report-$ID.zip -d frontend/reports
          done

      # ðŸ“Œ Fetch Flutter Test Coverage Reports
      - name: Get and Download Latest Flutter Coverage Reports
        run: |
          mkdir -p frontend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_FLUTTER_TEST_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="frontend-coverage") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading frontend-coverage artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o frontend-coverage-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip frontend-coverage-$ID.zip -d frontend/reports
          done

      - name: List Downloaded Reports
        run: ls -R backend/reports && ls -R frontend/reports

  sonarqube:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: fetch-artifacts  # âœ… Ensures artifacts are fetched before running SonarCloud

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full Git history for analysis

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
