name: SonarCloud Analysis

on:
  push:
    branches:
      - main
      - release/**  # Run SonarCloud for main and release branches

  pull_request:
    branches:
      - main  # Run SonarCloud on PRs targeting main

  schedule:
   - cron: '0 2 */2 * *'  # Runs every other day at 2 AM UTC

permissions:
  actions: read  # ✅ Allows reading workflow artifacts
  contents: read  # ✅ Required for repository access

jobs:
  setup:
    name: Setup Job
    runs-on: ubuntu-latest

    steps:
      - name: Print Setup Message
        run: echo "Initializing SonarCloud Analysis Workflow"

  fetch-artifacts:
    name: Fetch Latest Test & Lint Reports (Backend + Frontend)
    runs-on: ubuntu-latest

    steps:
      - name: Ensure Report Directories Exist
        run: mkdir -p backend/reports frontend/reports

      - name: Get Latest Workflow Run ID for Backend Tests
        run: |
          echo "🔍 Fetching latest workflow run ID for Backend Tests..."
          TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&branch=${{ github.ref_name }}" | \
          jq -r '.workflow_runs[] | select(.name=="Backend Tests") | .id' | head -n 1)

          if [[ -z "$TEST_RUN_ID" ]]; then
            echo "⚠️ No Backend Tests run found!"
          else
            echo "✅ Backend Tests Run ID: $TEST_RUN_ID"
          fi

          echo "LATEST_TEST_RUN_ID=${TEST_RUN_ID}" >> $GITHUB_ENV

      - name: Get Latest Workflow Run ID for Flutter Testing
        run: |
          echo "🔍 Fetching latest workflow run ID for Flutter Testing..."
          FLUTTER_TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&branch=${{ github.ref_name }}" | \
          jq -r '.workflow_runs[] | select(.name=="Flutter Testing") | .id' | head -n 1)

          if [[ -z "$FLUTTER_TEST_RUN_ID" ]]; then
            echo "⚠️ No Flutter Tests run found!"
          else
            echo "✅ Flutter Testing Run ID: $FLUTTER_TEST_RUN_ID"
          fi

          echo "LATEST_FLUTTER_TEST_RUN_ID=${FLUTTER_TEST_RUN_ID}" >> $GITHUB_ENV

      - name: Download Flutter Test Coverage Artifact
        run: |
          echo "🔽 Downloading Flutter coverage artifact..."
          FLUTTER_TEST_ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_FLUTTER_TEST_RUN_ID}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="frontend-coverage") | .archive_download_url')

          if [[ -z "$FLUTTER_TEST_ARTIFACT_URL" ]]; then
            echo "❌ No Flutter test coverage artifact found!"
            exit 1
          fi

          echo "✅ Artifact URL: $FLUTTER_TEST_ARTIFACT_URL"

          curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o frontend-coverage.zip "$FLUTTER_TEST_ARTIFACT_URL"

          echo "📂 Extracting coverage artifact..."
          mkdir -p frontend/coverage
          unzip -o frontend-coverage.zip -d frontend/coverage

          if [[ ! -s frontend/coverage/lcov.info ]]; then
            echo "⚠️ Downloaded coverage file is empty!"
          fi

      - name: List Downloaded Reports
        run: |
          echo "📄 Checking downloaded reports..."
          ls -R backend/reports frontend/reports || echo "⚠️ Reports not found, but proceeding."

  sonarqube:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: fetch-artifacts  # ✅ Ensures artifacts are fetched before running SonarCloud

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full Git history for analysis

      - name: Ensure Required Reports Exist (Prevent SonarCloud Failure)
        run: |
          mkdir -p backend/reports frontend/reports

          if [ ! -f frontend/coverage/lcov.info ]; then
            echo "⚠️ Coverage report missing, creating empty file!"
            echo "TN:" > frontend/coverage/lcov.info
          fi

      - name: List Reports Before Running SonarCloud
        run: |
          echo "🔍 Backend Reports:"
          ls -lh backend/reports
          echo "🔍 Frontend Reports:"
          ls -lh frontend/reports

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
