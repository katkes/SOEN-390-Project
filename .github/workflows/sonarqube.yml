name: SonarQube Analysis

on:
  workflow_run:
    workflows: ["Backend Tests", "Python Linting & Formatting"]
    types:
      - completed

permissions:
  actions: read  # ✅ Allows reading workflow artifacts
  contents: read  # ✅ Required for repository access

jobs:
  setup:
    name: Setup Job
    runs-on: ubuntu-latest

    steps:
      - name: Print Setup Message
        run: echo "Initializing SonarQube Analysis Workflow"

  fetch-artifacts:
    name: Fetch Latest Test & Lint Reports
    runs-on: ubuntu-latest

    steps:
      - name: Get Latest Workflow Run ID for Backend Tests
        run: |
          TEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Backend Tests") | .id' | head -n 1)

          echo "LATEST_TEST_RUN_ID=${TEST_RUN_ID}" >> $GITHUB_ENV

      - name: Get Latest Workflow Run ID for Python Linting
        run: |
          LINT_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed" | \
          jq -r '.workflow_runs[] | select(.name=="Python Linting & Formatting") | .id' | head -n 1)

          echo "LATEST_LINT_RUN_ID=${LINT_RUN_ID}" >> $GITHUB_ENV

      - name: Get and Download Latest Test Reports
        run: |
          mkdir -p backend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_TEST_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="test-reports") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading test-reports artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o test-reports-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip test-reports-$ID.zip -d backend/reports
          done

      - name: Get and Download Latest Pylint Reports
        run: |
          mkdir -p backend/reports

          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_LINT_RUN_ID }}/artifacts" | \
          jq -r '.artifacts[] | select(.name=="pylint-reports") | .id')

          for ID in $ARTIFACT_IDS; do
            echo "Downloading pylint-reports artifact ID: $ID"
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -o pylint-reports-$ID.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip"

            unzip pylint-reports-$ID.zip -d backend/reports
          done

      - name: List Downloaded Reports
        run: ls -R backend/reports

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: fetch-artifacts  # ✅ Ensures artifacts are fetched before running SonarQube

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full Git history for analysis

      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
