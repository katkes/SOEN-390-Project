// Mocks generated by Mockito 5.4.5 from annotations
// in soen_390/test/utils/navigation_utils_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;

import 'package:flutter/material.dart' as _i1;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i16;
import 'package:flutter_riverpod/src/internals.dart' as _i3;
import 'package:geolocator/geolocator.dart' as _i7;
import 'package:latlong2/latlong.dart' as _i8;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:soen_390/models/route_query_options.dart' as _i21;
import 'package:soen_390/models/route_result.dart' as _i20;
import 'package:soen_390/providers/navigation_provider.dart' as _i4;
import 'package:soen_390/screens/indoor/mappedin_map_controller.dart' as _i12;
import 'package:soen_390/services/geocoding_service.dart' as _i18;
import 'package:soen_390/services/google_route_service.dart' as _i19;
import 'package:soen_390/services/interfaces/http_client_interface.dart' as _i5;
import 'package:soen_390/utils/campus_route_checker.dart' as _i22;
import 'package:soen_390/utils/google_api_helper.dart' as _i6;
import 'package:soen_390/utils/google_directions_url_builder.dart' as _i10;
import 'package:soen_390/utils/location_service.dart' as _i9;
import 'package:soen_390/utils/route_cache_manager.dart' as _i24;
import 'package:soen_390/utils/route_result_parser.dart' as _i11;
import 'package:soen_390/utils/waypoint_validator.dart' as _i23;
import 'package:soen_390/widgets/mappedin_webview.dart' as _i13;
import 'package:state_notifier/state_notifier.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBuildContext_1 extends _i2.SmartFake implements _i1.BuildContext {
  _FakeBuildContext_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeProviderSubscription_2<State> extends _i2.SmartFake
    implements _i3.ProviderSubscription<State> {
  _FakeProviderSubscription_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeNavigationState_3 extends _i2.SmartFake
    implements _i4.NavigationState {
  _FakeNavigationState_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIHttpClient_4 extends _i2.SmartFake implements _i5.IHttpClient {
  _FakeIHttpClient_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGoogleApiHelper_5 extends _i2.SmartFake
    implements _i6.GoogleApiHelper {
  _FakeGoogleApiHelper_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGeolocatorPlatform_6 extends _i2.SmartFake
    implements _i7.GeolocatorPlatform {
  _FakeGeolocatorPlatform_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePosition_7 extends _i2.SmartFake implements _i7.Position {
  _FakePosition_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocationSettings_8 extends _i2.SmartFake
    implements _i7.LocationSettings {
  _FakeLocationSettings_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLatLng_9 extends _i2.SmartFake implements _i8.LatLng {
  _FakeLatLng_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocationService_10 extends _i2.SmartFake
    implements _i9.LocationService {
  _FakeLocationService_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGoogleDirectionsUrlBuilder_11 extends _i2.SmartFake
    implements _i10.GoogleDirectionsUrlBuilder {
  _FakeGoogleDirectionsUrlBuilder_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRouteResultParser_12 extends _i2.SmartFake
    implements _i11.RouteResultParser {
  _FakeRouteResultParser_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MappedinMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMappedinMapController extends _i2.Mock
    implements _i12.MappedinMapController {
  MockMappedinMapController() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i13.MappedinWebViewState> get webViewKey =>
      (super.noSuchMethod(
        Invocation.getter(#webViewKey),
        returnValue: _FakeGlobalKey_0<_i13.MappedinWebViewState>(
          this,
          Invocation.getter(#webViewKey),
        ),
      ) as _i1.GlobalKey<_i13.MappedinWebViewState>);

  @override
  set webViewKey(_i1.GlobalKey<_i13.MappedinWebViewState>? _webViewKey) =>
      super.noSuchMethod(
        Invocation.setter(#webViewKey, _webViewKey),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<bool> selectBuildingByName(String? buildingName) =>
      (super.noSuchMethod(
        Invocation.method(#selectBuildingByName, [buildingName]),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);

  @override
  _i14.Future<bool> selectBuildingById(String? mapId) => (super.noSuchMethod(
        Invocation.method(#selectBuildingById, [mapId]),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);

  @override
  bool setMapId(String? mapId) => (super.noSuchMethod(
        Invocation.method(#setMapId, [mapId]),
        returnValue: false,
      ) as bool);

  @override
  _i14.Future<bool> navigateToRoom(String? roomNumber) => (super.noSuchMethod(
        Invocation.method(#navigateToRoom, [roomNumber]),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
}

/// A class which mocks [WidgetRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockWidgetRef extends _i2.Mock implements _i3.WidgetRef {
  MockWidgetRef() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_1(this, Invocation.getter(#context)),
      ) as _i1.BuildContext);

  @override
  T watch<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(#watch, [provider]),
        returnValue: _i15.dummyValue<T>(
          this,
          Invocation.method(#watch, [provider]),
        ),
      ) as T);

  @override
  bool exists(_i3.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(#exists, [provider]),
        returnValue: false,
      ) as bool);

  @override
  void listen<T>(
    _i3.ProviderListenable<T>? provider,
    void Function(T?, T)? listener, {
    void Function(Object, StackTrace)? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(#listen, [provider, listener], {#onError: onError}),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ProviderSubscription<T> listenManual<T>(
    _i3.ProviderListenable<T>? provider,
    void Function(T?, T)? listener, {
    void Function(Object, StackTrace)? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenManual,
          [provider, listener],
          {#onError: onError, #fireImmediately: fireImmediately},
        ),
        returnValue: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listenManual,
            [provider, listener],
            {#onError: onError, #fireImmediately: fireImmediately},
          ),
        ),
      ) as _i3.ProviderSubscription<T>);

  @override
  T read<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(#read, [provider]),
        returnValue: _i15.dummyValue<T>(
          this,
          Invocation.method(#read, [provider]),
        ),
      ) as T);

  @override
  State refresh<State>(_i3.Refreshable<State>? provider) => (super.noSuchMethod(
        Invocation.method(#refresh, [provider]),
        returnValue: _i15.dummyValue<State>(
          this,
          Invocation.method(#refresh, [provider]),
        ),
      ) as State);

  @override
  void invalidate(_i3.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(#invalidate, [provider]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationNotifier extends _i2.Mock
    implements _i4.NavigationNotifier {
  MockNavigationNotifier() {
    _i2.throwOnMissingStub(this);
  }

  @override
  set onError(_i16.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(#onError, _onError),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i14.Stream<_i4.NavigationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i4.NavigationState>.empty(),
      ) as _i14.Stream<_i4.NavigationState>);

  @override
  _i4.NavigationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNavigationState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.NavigationState);

  @override
  set state(_i4.NavigationState? value) => super.noSuchMethod(
        Invocation.setter(#state, value),
        returnValueForMissingStub: null,
      );

  @override
  _i4.NavigationState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeNavigationState_3(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i4.NavigationState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setSelectedIndex(int? index) => super.noSuchMethod(
        Invocation.method(#setSelectedIndex, [index]),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i4.NavigationState? old,
    _i4.NavigationState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateShouldNotify, [old, current]),
        returnValue: false,
      ) as bool);

  @override
  _i16.RemoveListener addListener(
    _i17.Listener<_i4.NavigationState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i16.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GeocodingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeocodingService extends _i2.Mock implements _i18.GeocodingService {
  MockGeocodingService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.IHttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeIHttpClient_4(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i5.IHttpClient);

  @override
  _i6.GoogleApiHelper get apiHelper => (super.noSuchMethod(
        Invocation.getter(#apiHelper),
        returnValue: _FakeGoogleApiHelper_5(
          this,
          Invocation.getter(#apiHelper),
        ),
      ) as _i6.GoogleApiHelper);

  @override
  _i14.Future<_i8.LatLng?> getCoordinates(String? address) =>
      (super.noSuchMethod(
        Invocation.method(#getCoordinates, [address]),
        returnValue: _i14.Future<_i8.LatLng?>.value(),
      ) as _i14.Future<_i8.LatLng?>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i2.Mock implements _i9.LocationService {
  MockLocationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i7.GeolocatorPlatform get geolocator => (super.noSuchMethod(
        Invocation.getter(#geolocator),
        returnValue: _FakeGeolocatorPlatform_6(
          this,
          Invocation.getter(#geolocator),
        ),
      ) as _i7.GeolocatorPlatform);

  @override
  _i7.Position get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakePosition_7(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as _i7.Position);

  @override
  set currentPosition(_i7.Position? _currentPosition) => super.noSuchMethod(
        Invocation.setter(#currentPosition, _currentPosition),
        returnValueForMissingStub: null,
      );

  @override
  _i7.LocationSettings get locSetting => (super.noSuchMethod(
        Invocation.getter(#locSetting),
        returnValue: _FakeLocationSettings_8(
          this,
          Invocation.getter(#locSetting),
        ),
      ) as _i7.LocationSettings);

  @override
  set locSetting(_i7.LocationSettings? _locSetting) => super.noSuchMethod(
        Invocation.setter(#locSetting, _locSetting),
        returnValueForMissingStub: null,
      );

  @override
  bool get serviceEnabled => (super.noSuchMethod(
        Invocation.getter(#serviceEnabled),
        returnValue: false,
      ) as bool);

  @override
  set serviceEnabled(bool? _serviceEnabled) => super.noSuchMethod(
        Invocation.setter(#serviceEnabled, _serviceEnabled),
        returnValueForMissingStub: null,
      );

  @override
  _i7.LocationPermission get permission => (super.noSuchMethod(
        Invocation.getter(#permission),
        returnValue: _i7.LocationPermission.denied,
      ) as _i7.LocationPermission);

  @override
  set permission(_i7.LocationPermission? _permission) => super.noSuchMethod(
        Invocation.setter(#permission, _permission),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<bool> isLocationEnabled() => (super.noSuchMethod(
        Invocation.method(#isLocationEnabled, []),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);

  @override
  _i14.Future<bool> determinePermissions() => (super.noSuchMethod(
        Invocation.method(#determinePermissions, []),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);

  @override
  _i14.Future<_i7.Position> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#getCurrentLocation, []),
        returnValue: _i14.Future<_i7.Position>.value(
          _FakePosition_7(this, Invocation.method(#getCurrentLocation, [])),
        ),
      ) as _i14.Future<_i7.Position>);

  @override
  _i14.Future<void> updateCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocation, []),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  _i14.Future<_i7.Position> getCurrentLocationAccurately() =>
      (super.noSuchMethod(
        Invocation.method(#getCurrentLocationAccurately, []),
        returnValue: _i14.Future<_i7.Position>.value(
          _FakePosition_7(
            this,
            Invocation.method(#getCurrentLocationAccurately, []),
          ),
        ),
      ) as _i14.Future<_i7.Position>);

  @override
  _i14.Future<void> updateCurrentLocationAccurately() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocationAccurately, []),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void takePosition(_i7.Position? p) => super.noSuchMethod(
        Invocation.method(#takePosition, [p]),
        returnValueForMissingStub: null,
      );

  @override
  void setPlatformSpecificLocationSettings() => super.noSuchMethod(
        Invocation.method(#setPlatformSpecificLocationSettings, []),
        returnValueForMissingStub: null,
      );

  @override
  void createLocationStream() => super.noSuchMethod(
        Invocation.method(#createLocationStream, []),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<void> startUp() => (super.noSuchMethod(
        Invocation.method(#startUp, []),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void stopListening() => super.noSuchMethod(
        Invocation.method(#stopListening, []),
        returnValueForMissingStub: null,
      );

  @override
  bool checkIfPositionIsAtSGW(_i8.LatLng? coordinates) => (super.noSuchMethod(
        Invocation.method(#checkIfPositionIsAtSGW, [coordinates]),
        returnValue: false,
      ) as bool);

  @override
  bool checkIfPositionIsAtLOY(_i8.LatLng? coordinates) => (super.noSuchMethod(
        Invocation.method(#checkIfPositionIsAtLOY, [coordinates]),
        returnValue: false,
      ) as bool);

  @override
  _i14.Stream<_i7.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(#getPositionStream, []),
        returnValue: _i14.Stream<_i7.Position>.empty(),
      ) as _i14.Stream<_i7.Position>);

  @override
  _i8.LatLng convertPositionToLatLng(_i7.Position? p) => (super.noSuchMethod(
        Invocation.method(#convertPositionToLatLng, [p]),
        returnValue: _FakeLatLng_9(
          this,
          Invocation.method(#convertPositionToLatLng, [p]),
        ),
      ) as _i8.LatLng);

  @override
  _i14.Stream<_i8.LatLng> getLatLngStream() => (super.noSuchMethod(
        Invocation.method(#getLatLngStream, []),
        returnValue: _i14.Stream<_i8.LatLng>.empty(),
      ) as _i14.Stream<_i8.LatLng>);
}

/// A class which mocks [GoogleRouteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleRouteService extends _i2.Mock
    implements _i19.GoogleRouteService {
  MockGoogleRouteService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.LocationService get locationService => (super.noSuchMethod(
        Invocation.getter(#locationService),
        returnValue: _FakeLocationService_10(
          this,
          Invocation.getter(#locationService),
        ),
      ) as _i9.LocationService);

  @override
  _i10.GoogleDirectionsUrlBuilder get urlBuilder => (super.noSuchMethod(
        Invocation.getter(#urlBuilder),
        returnValue: _FakeGoogleDirectionsUrlBuilder_11(
          this,
          Invocation.getter(#urlBuilder),
        ),
      ) as _i10.GoogleDirectionsUrlBuilder);

  @override
  _i11.RouteResultParser get parser => (super.noSuchMethod(
        Invocation.getter(#parser),
        returnValue: _FakeRouteResultParser_12(
          this,
          Invocation.getter(#parser),
        ),
      ) as _i11.RouteResultParser);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.IHttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeIHttpClient_4(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i5.IHttpClient);

  @override
  _i6.GoogleApiHelper get apiHelper => (super.noSuchMethod(
        Invocation.getter(#apiHelper),
        returnValue: _FakeGoogleApiHelper_5(
          this,
          Invocation.getter(#apiHelper),
        ),
      ) as _i6.GoogleApiHelper);

  @override
  _i14.Future<_i20.RouteResult?> getRoute({
    required _i8.LatLng? from,
    required _i8.LatLng? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getRoute, [], {#from: from, #to: to}),
        returnValue: _i14.Future<_i20.RouteResult?>.value(),
      ) as _i14.Future<_i20.RouteResult?>);

  @override
  _i14.Future<Map<String, List<_i20.RouteResult>>> getRoutes({
    required _i8.LatLng? from,
    required _i8.LatLng? to,
    DateTime? departureTime,
    DateTime? arrivalTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getRoutes, [], {
          #from: from,
          #to: to,
          #departureTime: departureTime,
          #arrivalTime: arrivalTime,
        }),
        returnValue: _i14.Future<Map<String, List<_i20.RouteResult>>>.value(
          <String, List<_i20.RouteResult>>{},
        ),
      ) as _i14.Future<Map<String, List<_i20.RouteResult>>>);

  @override
  _i20.RouteResult? selectRoute(List<_i20.RouteResult>? routes, int? index) =>
      (super.noSuchMethod(Invocation.method(#selectRoute, [routes, index]))
          as _i20.RouteResult?);

  @override
  _i14.Future<List<_i20.RouteResult>?> getRoutesFromOptions(
    _i21.RouteQueryOptions? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#getRoutesFromOptions, [options]),
        returnValue: _i14.Future<List<_i20.RouteResult>?>.value(),
      ) as _i14.Future<List<_i20.RouteResult>?>);
}

/// A class which mocks [CampusRouteChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockCampusRouteChecker extends _i2.Mock
    implements _i22.CampusRouteChecker {
  MockCampusRouteChecker() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.LocationService get locationService => (super.noSuchMethod(
        Invocation.getter(#locationService),
        returnValue: _FakeLocationService_10(
          this,
          Invocation.getter(#locationService),
        ),
      ) as _i9.LocationService);

  @override
  bool isInterCampus({required _i8.LatLng? from, required _i8.LatLng? to}) =>
      (super.noSuchMethod(
        Invocation.method(#isInterCampus, [], {#from: from, #to: to}),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [WaypointValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaypointValidator extends _i2.Mock implements _i23.WaypointValidator {
  MockWaypointValidator() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool validate(
    _i1.BuildContext? context,
    List<String>? waypoints,
    int? minRoutes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#validate, [context, waypoints, minRoutes]),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [RouteCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteCacheManager extends _i2.Mock implements _i24.RouteCacheManager {
  MockRouteCacheManager() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool hasCached(String? mode, String? key) => (super.noSuchMethod(
        Invocation.method(#hasCached, [mode, key]),
        returnValue: false,
      ) as bool);

  @override
  List<_i20.RouteResult>? getCached(String? mode, String? key) =>
      (super.noSuchMethod(Invocation.method(#getCached, [mode, key]))
          as List<_i20.RouteResult>?);

  @override
  void setCache(String? mode, String? key, List<_i20.RouteResult>? routes) =>
      super.noSuchMethod(
        Invocation.method(#setCache, [mode, key, routes]),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValueForMissingStub: null,
      );
}
