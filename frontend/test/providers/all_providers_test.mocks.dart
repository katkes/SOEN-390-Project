// Mocks generated by Mockito 5.4.5 from annotations
// in soen_390/test/providers/all_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:geolocator/geolocator.dart' as _i4;
import 'package:geolocator_platform_interface/src/enums/enums.dart' as _i7;
import 'package:geolocator_platform_interface/src/models/models.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:latlong2/latlong.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:soen_390/services/building_to_coordinates.dart' as _i9;
import 'package:soen_390/services/http_service.dart' as _i5;
import 'package:soen_390/utils/location_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGeolocatorPlatform_2 extends _i1.SmartFake
    implements _i4.GeolocatorPlatform {
  _FakeGeolocatorPlatform_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocationSettings_3 extends _i1.SmartFake
    implements _i2.LocationSettings {
  _FakeLocationSettings_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpService_4 extends _i1.SmartFake implements _i5.HttpService {
  _FakeHttpService_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GeolocatorPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorPlatform extends _i1.Mock
    implements _i4.GeolocatorPlatform {
  MockGeolocatorPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i7.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(#checkPermission, []),
        returnValue: _i6.Future<_i7.LocationPermission>.value(
          _i7.LocationPermission.denied,
        ),
      ) as _i6.Future<_i7.LocationPermission>);

  @override
  _i6.Future<_i7.LocationPermission> requestPermission() => (super.noSuchMethod(
        Invocation.method(#requestPermission, []),
        returnValue: _i6.Future<_i7.LocationPermission>.value(
          _i7.LocationPermission.denied,
        ),
      ) as _i6.Future<_i7.LocationPermission>);

  @override
  _i6.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(#isLocationServiceEnabled, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i2.Position?> getLastKnownPosition({
    bool? forceLocationManager = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getLastKnownPosition, [], {
          #forceLocationManager: forceLocationManager,
        }),
        returnValue: _i6.Future<_i2.Position?>.value(),
      ) as _i6.Future<_i2.Position?>);

  @override
  _i6.Future<_i2.Position> getCurrentPosition({
    _i2.LocationSettings? locationSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getCurrentPosition, [], {
          #locationSettings: locationSettings,
        }),
        returnValue: _i6.Future<_i2.Position>.value(
          _FakePosition_0(
            this,
            Invocation.method(#getCurrentPosition, [], {
              #locationSettings: locationSettings,
            }),
          ),
        ),
      ) as _i6.Future<_i2.Position>);

  @override
  _i6.Stream<_i7.ServiceStatus> getServiceStatusStream() => (super.noSuchMethod(
        Invocation.method(#getServiceStatusStream, []),
        returnValue: _i6.Stream<_i7.ServiceStatus>.empty(),
      ) as _i6.Stream<_i7.ServiceStatus>);

  @override
  _i6.Stream<_i2.Position> getPositionStream({
    _i2.LocationSettings? locationSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getPositionStream, [], {
          #locationSettings: locationSettings,
        }),
        returnValue: _i6.Stream<_i2.Position>.empty(),
      ) as _i6.Stream<_i2.Position>);

  @override
  _i6.Future<_i7.LocationAccuracyStatus> requestTemporaryFullAccuracy({
    required String? purposeKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#requestTemporaryFullAccuracy, [], {
          #purposeKey: purposeKey,
        }),
        returnValue: _i6.Future<_i7.LocationAccuracyStatus>.value(
          _i7.LocationAccuracyStatus.reduced,
        ),
      ) as _i6.Future<_i7.LocationAccuracyStatus>);

  @override
  _i6.Future<_i7.LocationAccuracyStatus> getLocationAccuracy() =>
      (super.noSuchMethod(
        Invocation.method(#getLocationAccuracy, []),
        returnValue: _i6.Future<_i7.LocationAccuracyStatus>.value(
          _i7.LocationAccuracyStatus.reduced,
        ),
      ) as _i6.Future<_i7.LocationAccuracyStatus>);

  @override
  _i6.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(#openAppSettings, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(#openLocationSettings, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#distanceBetween, [
          startLatitude,
          startLongitude,
          endLatitude,
          endLongitude,
        ]),
        returnValue: 0.0,
      ) as double);

  @override
  double bearingBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#bearingBetween, [
          startLatitude,
          startLongitude,
          endLatitude,
          endLongitude,
        ]),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i5.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(this, Invocation.getter(#client)),
      ) as _i3.Client);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i8.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GeolocatorPlatform get geolocator => (super.noSuchMethod(
        Invocation.getter(#geolocator),
        returnValue: _FakeGeolocatorPlatform_2(
          this,
          Invocation.getter(#geolocator),
        ),
      ) as _i4.GeolocatorPlatform);

  @override
  _i2.Position get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakePosition_0(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as _i2.Position);

  @override
  set currentPosition(_i2.Position? _currentPosition) => super.noSuchMethod(
        Invocation.setter(#currentPosition, _currentPosition),
        returnValueForMissingStub: null,
      );

  @override
  _i2.LocationSettings get locSetting => (super.noSuchMethod(
        Invocation.getter(#locSetting),
        returnValue: _FakeLocationSettings_3(
          this,
          Invocation.getter(#locSetting),
        ),
      ) as _i2.LocationSettings);

  @override
  set locSetting(_i2.LocationSettings? _locSetting) => super.noSuchMethod(
        Invocation.setter(#locSetting, _locSetting),
        returnValueForMissingStub: null,
      );

  @override
  bool get serviceEnabled => (super.noSuchMethod(
        Invocation.getter(#serviceEnabled),
        returnValue: false,
      ) as bool);

  @override
  set serviceEnabled(bool? _serviceEnabled) => super.noSuchMethod(
        Invocation.setter(#serviceEnabled, _serviceEnabled),
        returnValueForMissingStub: null,
      );

  @override
  _i7.LocationPermission get permission => (super.noSuchMethod(
        Invocation.getter(#permission),
        returnValue: _i7.LocationPermission.denied,
      ) as _i7.LocationPermission);

  @override
  set permission(_i7.LocationPermission? _permission) => super.noSuchMethod(
        Invocation.setter(#permission, _permission),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> isLocationEnabled() => (super.noSuchMethod(
        Invocation.method(#isLocationEnabled, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> determinePermissions() => (super.noSuchMethod(
        Invocation.method(#determinePermissions, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i2.Position> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#getCurrentLocation, []),
        returnValue: _i6.Future<_i2.Position>.value(
          _FakePosition_0(this, Invocation.method(#getCurrentLocation, [])),
        ),
      ) as _i6.Future<_i2.Position>);

  @override
  _i6.Future<void> updateCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocation, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.Position> getCurrentLocationAccurately() =>
      (super.noSuchMethod(
        Invocation.method(#getCurrentLocationAccurately, []),
        returnValue: _i6.Future<_i2.Position>.value(
          _FakePosition_0(
            this,
            Invocation.method(#getCurrentLocationAccurately, []),
          ),
        ),
      ) as _i6.Future<_i2.Position>);

  @override
  _i6.Future<void> updateCurrentLocationAccurately() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocationAccurately, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void takePosition(_i2.Position? p) => super.noSuchMethod(
        Invocation.method(#takePosition, [p]),
        returnValueForMissingStub: null,
      );

  @override
  void setPlatformSpecificLocationSettings() => super.noSuchMethod(
        Invocation.method(#setPlatformSpecificLocationSettings, []),
        returnValueForMissingStub: null,
      );

  @override
  void createLocationStream() => super.noSuchMethod(
        Invocation.method(#createLocationStream, []),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> startUp() => (super.noSuchMethod(
        Invocation.method(#startUp, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void stopListening() => super.noSuchMethod(
        Invocation.method(#stopListening, []),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<_i2.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(#getPositionStream, []),
        returnValue: _i6.Stream<_i2.Position>.empty(),
      ) as _i6.Stream<_i2.Position>);
}

/// A class which mocks [GeocodingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeocodingService extends _i1.Mock implements _i9.GeocodingService {
  MockGeocodingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.HttpService get httpService => (super.noSuchMethod(
        Invocation.getter(#httpService),
        returnValue: _FakeHttpService_4(
          this,
          Invocation.getter(#httpService),
        ),
      ) as _i5.HttpService);

  @override
  _i6.Future<_i11.LatLng?> getCoordinates(String? address) =>
      (super.noSuchMethod(
        Invocation.method(#getCoordinates, [address]),
        returnValue: _i6.Future<_i11.LatLng?>.value(),
      ) as _i6.Future<_i11.LatLng?>);
}
