// Mocks generated by Mockito 5.4.5 from annotations
// in soen_390/test/widgets/screens/calendar/event_edit_popup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:googleapis/calendar/v3.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:soen_390/repositories/calendar_repository.dart' as _i2;
import 'package:soen_390/screens/calendar/calendar_event_service.dart' as _i6;
import 'package:soen_390/services/calendar_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCalendarRepository_0 extends _i1.SmartFake
    implements _i2.CalendarRepository {
  _FakeCalendarRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarService extends _i1.Mock implements _i3.CalendarService {
  MockCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Event>> fetchEvents([String? calendarId = 'primary']) =>
      (super.noSuchMethod(
            Invocation.method(#fetchEvents, [calendarId]),
            returnValue: _i4.Future<List<_i5.Event>>.value(<_i5.Event>[]),
          )
          as _i4.Future<List<_i5.Event>>);

  @override
  _i4.Future<List<_i5.CalendarListEntry>> fetchCalendars() =>
      (super.noSuchMethod(
            Invocation.method(#fetchCalendars, []),
            returnValue: _i4.Future<List<_i5.CalendarListEntry>>.value(
              <_i5.CalendarListEntry>[],
            ),
          )
          as _i4.Future<List<_i5.CalendarListEntry>>);

  @override
  _i4.Future<_i5.Event?> createEvent(String? calendarId, _i5.Event? event) =>
      (super.noSuchMethod(
            Invocation.method(#createEvent, [calendarId, event]),
            returnValue: _i4.Future<_i5.Event?>.value(),
          )
          as _i4.Future<_i5.Event?>);

  @override
  _i4.Future<_i5.Event?> updateEvent(
    String? calendarId,
    String? eventId,
    _i5.Event? updatedEvent,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateEvent, [
              calendarId,
              eventId,
              updatedEvent,
            ]),
            returnValue: _i4.Future<_i5.Event?>.value(),
          )
          as _i4.Future<_i5.Event?>);

  @override
  _i4.Future<void> deleteEvent(String? calendarId, String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEvent, [calendarId, eventId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [CalendarEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarEventService extends _i1.Mock
    implements _i6.CalendarEventService {
  MockCalendarEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CalendarRepository get calendarRepository =>
      (super.noSuchMethod(
            Invocation.getter(#calendarRepository),
            returnValue: _FakeCalendarRepository_0(
              this,
              Invocation.getter(#calendarRepository),
            ),
          )
          as _i2.CalendarRepository);

  @override
  _i4.Future<Map<DateTime, List<_i5.Event>>> fetchCalendarEvents(
    String? calendarId, {
    bool? useCache = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchCalendarEvents,
              [calendarId],
              {#useCache: useCache},
            ),
            returnValue: _i4.Future<Map<DateTime, List<_i5.Event>>>.value(
              <DateTime, List<_i5.Event>>{},
            ),
          )
          as _i4.Future<Map<DateTime, List<_i5.Event>>>);

  @override
  List<_i5.Event> getEventsForDay(
    DateTime? day,
    Map<DateTime, List<_i5.Event>>? eventsByDay,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getEventsForDay, [day, eventsByDay]),
            returnValue: <_i5.Event>[],
          )
          as List<_i5.Event>);

  @override
  _i4.Future<List<_i5.CalendarListEntry>> fetchCalendars() =>
      (super.noSuchMethod(
            Invocation.method(#fetchCalendars, []),
            returnValue: _i4.Future<List<_i5.CalendarListEntry>>.value(
              <_i5.CalendarListEntry>[],
            ),
          )
          as _i4.Future<List<_i5.CalendarListEntry>>);

  @override
  _i4.Future<void> deleteEventFromCache(String? eventId, String? calendarId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEventFromCache, [eventId, calendarId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
