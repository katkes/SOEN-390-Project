// Mocks generated by Mockito 5.4.5 from annotations
// in soen_390/test/widgets/components/location_transport_selector_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/src/widgets/navigator.dart' as _i15;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:latlong2/latlong.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:soen_390/models/outdoor_poi.dart' as _i7;
import 'package:soen_390/models/places.dart' as _i12;
import 'package:soen_390/services/google_maps_api_client.dart' as _i6;
import 'package:soen_390/services/google_poi_service.dart' as _i10;
import 'package:soen_390/services/interfaces/http_client_interface.dart' as _i4;
import 'package:soen_390/services/location_updater.dart' as _i14;
import 'package:soen_390/services/poi_factory.dart' as _i13;
import 'package:soen_390/utils/google_api_helper.dart' as _i5;
import 'package:soen_390/utils/location_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeolocatorPlatform_0 extends _i1.SmartFake
    implements _i2.GeolocatorPlatform {
  _FakeGeolocatorPlatform_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePosition_1 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocationSettings_2 extends _i1.SmartFake
    implements _i2.LocationSettings {
  _FakeLocationSettings_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLatLng_3 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIHttpClient_4 extends _i1.SmartFake implements _i4.IHttpClient {
  _FakeIHttpClient_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGoogleApiHelper_5 extends _i1.SmartFake
    implements _i5.GoogleApiHelper {
  _FakeGoogleApiHelper_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGoogleMapsApiClient_6 extends _i1.SmartFake
    implements _i6.GoogleMapsApiClient {
  _FakeGoogleMapsApiClient_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePointOfInterest_7 extends _i1.SmartFake
    implements _i7.PointOfInterest {
  _FakePointOfInterest_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocationService_8 extends _i1.SmartFake
    implements _i8.LocationService {
  _FakeLocationService_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i8.LocationService {
  @override
  _i2.GeolocatorPlatform get geolocator => (super.noSuchMethod(
        Invocation.getter(#geolocator),
        returnValue: _FakeGeolocatorPlatform_0(
          this,
          Invocation.getter(#geolocator),
        ),
        returnValueForMissingStub: _FakeGeolocatorPlatform_0(
          this,
          Invocation.getter(#geolocator),
        ),
      ) as _i2.GeolocatorPlatform);

  @override
  _i2.Position get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakePosition_1(
          this,
          Invocation.getter(#currentPosition),
        ),
        returnValueForMissingStub: _FakePosition_1(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as _i2.Position);

  @override
  set currentPosition(_i2.Position? _currentPosition) => super.noSuchMethod(
        Invocation.setter(#currentPosition, _currentPosition),
        returnValueForMissingStub: null,
      );

  @override
  _i2.LocationSettings get locSetting => (super.noSuchMethod(
        Invocation.getter(#locSetting),
        returnValue: _FakeLocationSettings_2(
          this,
          Invocation.getter(#locSetting),
        ),
        returnValueForMissingStub: _FakeLocationSettings_2(
          this,
          Invocation.getter(#locSetting),
        ),
      ) as _i2.LocationSettings);

  @override
  set locSetting(_i2.LocationSettings? _locSetting) => super.noSuchMethod(
        Invocation.setter(#locSetting, _locSetting),
        returnValueForMissingStub: null,
      );

  @override
  bool get serviceEnabled => (super.noSuchMethod(
        Invocation.getter(#serviceEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set serviceEnabled(bool? _serviceEnabled) => super.noSuchMethod(
        Invocation.setter(#serviceEnabled, _serviceEnabled),
        returnValueForMissingStub: null,
      );

  @override
  _i2.LocationPermission get permission => (super.noSuchMethod(
        Invocation.getter(#permission),
        returnValue: _i2.LocationPermission.denied,
        returnValueForMissingStub: _i2.LocationPermission.denied,
      ) as _i2.LocationPermission);

  @override
  set permission(_i2.LocationPermission? _permission) => super.noSuchMethod(
        Invocation.setter(#permission, _permission),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<bool> isLocationEnabled() => (super.noSuchMethod(
        Invocation.method(#isLocationEnabled, []),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> determinePermissions() => (super.noSuchMethod(
        Invocation.method(#determinePermissions, []),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i2.Position> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#getCurrentLocation, []),
        returnValue: _i9.Future<_i2.Position>.value(
          _FakePosition_1(this, Invocation.method(#getCurrentLocation, [])),
        ),
        returnValueForMissingStub: _i9.Future<_i2.Position>.value(
          _FakePosition_1(this, Invocation.method(#getCurrentLocation, [])),
        ),
      ) as _i9.Future<_i2.Position>);

  @override
  _i9.Future<void> updateCurrentLocation() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocation, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.Position> getCurrentLocationAccurately() =>
      (super.noSuchMethod(
        Invocation.method(#getCurrentLocationAccurately, []),
        returnValue: _i9.Future<_i2.Position>.value(
          _FakePosition_1(
            this,
            Invocation.method(#getCurrentLocationAccurately, []),
          ),
        ),
        returnValueForMissingStub: _i9.Future<_i2.Position>.value(
          _FakePosition_1(
            this,
            Invocation.method(#getCurrentLocationAccurately, []),
          ),
        ),
      ) as _i9.Future<_i2.Position>);

  @override
  _i9.Future<void> updateCurrentLocationAccurately() => (super.noSuchMethod(
        Invocation.method(#updateCurrentLocationAccurately, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void takePosition(_i2.Position? p) => super.noSuchMethod(
        Invocation.method(#takePosition, [p]),
        returnValueForMissingStub: null,
      );

  @override
  void setPlatformSpecificLocationSettings() => super.noSuchMethod(
        Invocation.method(#setPlatformSpecificLocationSettings, []),
        returnValueForMissingStub: null,
      );

  @override
  void createLocationStream() => super.noSuchMethod(
        Invocation.method(#createLocationStream, []),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> startUp() => (super.noSuchMethod(
        Invocation.method(#startUp, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void stopListening() => super.noSuchMethod(
        Invocation.method(#stopListening, []),
        returnValueForMissingStub: null,
      );

  @override
  bool checkIfPositionIsAtSGW(_i3.LatLng? coordinates) => (super.noSuchMethod(
        Invocation.method(#checkIfPositionIsAtSGW, [coordinates]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool checkIfPositionIsAtLOY(_i3.LatLng? coordinates) => (super.noSuchMethod(
        Invocation.method(#checkIfPositionIsAtLOY, [coordinates]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Stream<_i2.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(#getPositionStream, []),
        returnValue: _i9.Stream<_i2.Position>.empty(),
        returnValueForMissingStub: _i9.Stream<_i2.Position>.empty(),
      ) as _i9.Stream<_i2.Position>);

  @override
  _i3.LatLng convertPositionToLatLng(_i2.Position? p) => (super.noSuchMethod(
        Invocation.method(#convertPositionToLatLng, [p]),
        returnValue: _FakeLatLng_3(
          this,
          Invocation.method(#convertPositionToLatLng, [p]),
        ),
        returnValueForMissingStub: _FakeLatLng_3(
          this,
          Invocation.method(#convertPositionToLatLng, [p]),
        ),
      ) as _i3.LatLng);

  @override
  _i9.Stream<_i3.LatLng> getLatLngStream() => (super.noSuchMethod(
        Invocation.method(#getLatLngStream, []),
        returnValue: _i9.Stream<_i3.LatLng>.empty(),
        returnValueForMissingStub: _i9.Stream<_i3.LatLng>.empty(),
      ) as _i9.Stream<_i3.LatLng>);
}

/// A class which mocks [GooglePOIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGooglePOIService extends _i1.Mock implements _i10.GooglePOIService {
  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
        returnValueForMissingStub: _i11.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i4.IHttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeIHttpClient_4(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeIHttpClient_4(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i4.IHttpClient);

  @override
  _i5.GoogleApiHelper get apiHelper => (super.noSuchMethod(
        Invocation.getter(#apiHelper),
        returnValue: _FakeGoogleApiHelper_5(
          this,
          Invocation.getter(#apiHelper),
        ),
        returnValueForMissingStub: _FakeGoogleApiHelper_5(
          this,
          Invocation.getter(#apiHelper),
        ),
      ) as _i5.GoogleApiHelper);

  @override
  _i9.Future<List<_i12.Place>> getNearbyPlaces({
    required double? latitude,
    required double? longitude,
    required String? type,
    required int? radius,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getNearbyPlaces, [], {
          #latitude: latitude,
          #longitude: longitude,
          #type: type,
          #radius: radius,
        }),
        returnValue: _i9.Future<List<_i12.Place>>.value(<_i12.Place>[]),
        returnValueForMissingStub: _i9.Future<List<_i12.Place>>.value(
          <_i12.Place>[],
        ),
      ) as _i9.Future<List<_i12.Place>>);
}

/// A class which mocks [PointOfInterestFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointOfInterestFactory extends _i1.Mock
    implements _i13.PointOfInterestFactory {
  @override
  _i6.GoogleMapsApiClient get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _FakeGoogleMapsApiClient_6(
          this,
          Invocation.getter(#apiClient),
        ),
        returnValueForMissingStub: _FakeGoogleMapsApiClient_6(
          this,
          Invocation.getter(#apiClient),
        ),
      ) as _i6.GoogleMapsApiClient);

  @override
  _i9.Future<_i7.PointOfInterest> createPointOfInterest({
    required String? placeId,
    required String? imageUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createPointOfInterest, [], {
          #placeId: placeId,
          #imageUrl: imageUrl,
        }),
        returnValue: _i9.Future<_i7.PointOfInterest>.value(
          _FakePointOfInterest_7(
            this,
            Invocation.method(#createPointOfInterest, [], {
              #placeId: placeId,
              #imageUrl: imageUrl,
            }),
          ),
        ),
        returnValueForMissingStub: _i9.Future<_i7.PointOfInterest>.value(
          _FakePointOfInterest_7(
            this,
            Invocation.method(#createPointOfInterest, [], {
              #placeId: placeId,
              #imageUrl: imageUrl,
            }),
          ),
        ),
      ) as _i9.Future<_i7.PointOfInterest>);
}

/// A class which mocks [LocationUpdater].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationUpdater extends _i1.Mock implements _i14.LocationUpdater {
  @override
  _i8.LocationService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeLocationService_8(
          this,
          Invocation.getter(#service),
        ),
        returnValueForMissingStub: _FakeLocationService_8(
          this,
          Invocation.getter(#service),
        ),
      ) as _i8.LocationService);

  @override
  _i9.Future<_i3.LatLng> getCurrentLatLng() => (super.noSuchMethod(
        Invocation.method(#getCurrentLatLng, []),
        returnValue: _i9.Future<_i3.LatLng>.value(
          _FakeLatLng_3(this, Invocation.method(#getCurrentLatLng, [])),
        ),
        returnValueForMissingStub: _i9.Future<_i3.LatLng>.value(
          _FakeLatLng_3(this, Invocation.method(#getCurrentLatLng, [])),
        ),
      ) as _i9.Future<_i3.LatLng>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i15.NavigatorObserver {
  @override
  void didPush(
    _i15.Route<dynamic>? route,
    _i15.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didPush, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i15.Route<dynamic>? route,
    _i15.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didRemove, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i15.Route<dynamic>? newRoute,
    _i15.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(#didReplace, [], {
          #newRoute: newRoute,
          #oldRoute: oldRoute,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTop(
    _i15.Route<dynamic>? topRoute,
    _i15.Route<dynamic>? previousTopRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i15.Route<dynamic>? route,
    _i15.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didStartUserGesture, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(#didStopUserGesture, []),
        returnValueForMissingStub: null,
      );
}
