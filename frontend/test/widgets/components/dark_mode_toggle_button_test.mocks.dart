// Mocks generated by Mockito 5.4.5 from annotations
// in soen_390/test/widgets/components/dark_mode_toggle_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:riverpod/src/internals.dart' as _i2;
import 'package:state_notifier/state_notifier.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAlwaysAliveRefreshable_0<T1> extends _i1.SmartFake
    implements _i2.AlwaysAliveRefreshable<T1> {
  _FakeAlwaysAliveRefreshable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStateNotifierProviderElement_1<
  NotifierT1 extends _i3.StateNotifier<T1>,
  T1
>
    extends _i1.SmartFake
    implements _i2.StateNotifierProviderElement<NotifierT1, T1> {
  _FakeStateNotifierProviderElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeOverride_2 extends _i1.SmartFake implements _i2.Override {
  _FakeOverride_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProviderSubscription_3<State> extends _i1.SmartFake
    implements _i2.ProviderSubscription<State> {
  _FakeProviderSubscription_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAlwaysAliveProviderListenable_4<State> extends _i1.SmartFake
    implements _i2.AlwaysAliveProviderListenable<State> {
  _FakeAlwaysAliveProviderListenable_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

/// A class which mocks [StateNotifierProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateNotifierProvider<NotifierT extends _i3.StateNotifier<T>, T>
    extends _i1.Mock
    implements _i2.StateNotifierProvider<NotifierT, T> {
  MockStateNotifierProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AlwaysAliveRefreshable<NotifierT> get notifier =>
      (super.noSuchMethod(
            Invocation.getter(#notifier),
            returnValue: _FakeAlwaysAliveRefreshable_0<NotifierT>(
              this,
              Invocation.getter(#notifier),
            ),
          )
          as _i2.AlwaysAliveRefreshable<NotifierT>);

  @override
  _i2.StateNotifierProviderElement<NotifierT, T> createElement() =>
      (super.noSuchMethod(
            Invocation.method(#createElement, []),
            returnValue: _FakeStateNotifierProviderElement_1<NotifierT, T>(
              this,
              Invocation.method(#createElement, []),
            ),
          )
          as _i2.StateNotifierProviderElement<NotifierT, T>);

  @override
  _i2.Override overrideWith(
    _i2.Create<NotifierT, _i2.StateNotifierProviderRef<NotifierT, T>>? create,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#overrideWith, [create]),
            returnValue: _FakeOverride_2(
              this,
              Invocation.method(#overrideWith, [create]),
            ),
          )
          as _i2.Override);

  @override
  _i2.ProviderSubscription<T> addListener(
    _i2.Node? node,
    void Function(T?, T)? listener, {
    required void Function(Object, StackTrace)? onError,
    required void Function()? onDependencyMayHaveChanged,
    required bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [node, listener],
              {
                #onError: onError,
                #onDependencyMayHaveChanged: onDependencyMayHaveChanged,
                #fireImmediately: fireImmediately,
              },
            ),
            returnValue: _FakeProviderSubscription_3<T>(
              this,
              Invocation.method(
                #addListener,
                [node, listener],
                {
                  #onError: onError,
                  #onDependencyMayHaveChanged: onDependencyMayHaveChanged,
                  #fireImmediately: fireImmediately,
                },
              ),
            ),
          )
          as _i2.ProviderSubscription<T>);

  @override
  T read(_i2.Node? node) =>
      (super.noSuchMethod(
            Invocation.method(#read, [node]),
            returnValue: _i4.dummyValue<T>(
              this,
              Invocation.method(#read, [node]),
            ),
          )
          as T);

  @override
  _i2.AlwaysAliveProviderListenable<Selected> select<Selected>(
    Selected Function(T)? selector,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#select, [selector]),
            returnValue: _FakeAlwaysAliveProviderListenable_4<Selected>(
              this,
              Invocation.method(#select, [selector]),
            ),
          )
          as _i2.AlwaysAliveProviderListenable<Selected>);
}
